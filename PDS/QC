/* REXX QC */
/* syntax : tso qc dsname */
/*                                                                   */
arg str
address tso "MAKEBUF"
address ispexec
call init
f = OUTTRAP('OUT.','*','NOCONCAT')
x = listdsi(""str"" directory norecall)
f = OUTTRAP(OFF)
if sysreason = 8 then do
   ZEDSMSG = 'Warning *Not on DASD*'
   "ISPEXEC SETMSG MSG(ISRZ000)"
   signal bypass
end

if sysreason = 9 then do
   ZEDSMSG = 'Warning *Migrated*'
   "ISPEXEC SETMSG MSG(ISRZ000)"
   signal bypass
end
if sysreason = 5 then do
   ZEDSMSG = 'Warning *GDGBASE*'
   "ISPEXEC SETMSG MSG(ISRZ000)"
   signal bypass
end
if x > 0 then do
   ZEDSMSG = '*Obtain Failed* ' || sysreason
   "ISPEXEC SETMSG MSG(ISRZ000)"
   exit 0
end
bypass :
TTAB  = "'"
fstr = TRANSLATE(str," ",TTAB)
fstr = strip(fstr)
dot = '.'
parse value fstr with hlq (dot) rlq
udsname = userid() || dot || rlq
call dataset
if length(f_name) > 7 then udsname = f_name
udsname = strip(udsname)
upper udsname
select
  when sysunits = 'TRACK'    then sysunits = 'TRK'
  when sysunits = 'CYLINDER' then sysunits = 'CYL'
  when sysunits = 'BLOCK'    then sysunits = sysblksize
  when sysunits = ''         then do
                                     sysunits = 'CYL'
                                     sysprimary = 10
                                     sysseconds = 10
                                     sysseconds = 10
                                     dcb='no'
                                  end
  otherwise nop
end

call print
call build_jcl
call edit_jcl
qui :
address tso
"DROPBUF"
IF LENGTH(COPYJCL) > 3 THEN "FREE DD("COPYJCL") DELETE"
exit

build_jcl:
D = DATE(J);R1 = RANDOM(100,999);R2 = RANDOM(100,999);
T = TIME();PARSE VALUE T WITH HH ':' MM ':' SS;TT=HH||MM||SS
FRAG = '.T'||R1||TRUNC(R1*R2/RANDOM()/10)||'.Z'||TT
tempf = USERID()||".COPYJCL" || FRAG
jcl_dsn = "'"||tempf||"'"
COPYJCL = 'CJ'||R2||R1

address tso
"ALLOC DS("jcl_dsn") DD("COPYJCL") DSORG(PS) LRECL(80) RECFM(F) NEW KEEP"

call wj("//"userid()"C JOB (000000),'QUICKCOPY',                      ")
call wj("//         CLASS=U,TIME=1440,MSGCLASS=X,NOTIFY=&SYSUID       ")
call wj("//*---------------------------------------------------------*")
if sysdsorg \= '' then
call wj("// SET UDSORG="sysdsorg"                                             ")
if sysrecfm \= '' then
call wj("// SET URECFM="sysrecfm"                                             ")
if syslrecl \= '' then
call wj("// SET ULRECL="syslrecl"                                             ")
if sysblksize \= '' then
call wj("// SET UBLKSIZE="sysblksize"                                         ")
call wj("// SET UTYPE="sysunits"                                              ")
call wj("// SET UPRI="sysprimary"                                             ")
call wj("// SET USEC="sysseconds"                                             ")
if mgmtclas = '' then mgmtclas = 'SAMPLECL'
call wj("// SET UMGMT="mgmtclas"                                              ")
if sysadirblk \= '' then
call wj("// SET UDIRBLK="sysadirblk"                                          ")
call wj("//*---------------------------------------------------------*")
if sysdsorg = 'PO' then
call wj("//QCOPY    EXEC PGM=IEBCOPY                                  ")
if sysdsorg \= 'PO' then
call wj("//QCOPY    EXEC PGM=IDCAMS                                   ")
call wj("//SYSPRINT DD SYSOUT=*                                       ")
call wj("//SYSUT1   DD DISP=SHR,DSN="fstr"                            ")
call wj("//SYSUT2   DD DSN="udsname",                                 ")
call wj("//            DISP=(NEW,CATLG,DELETE),                       ")
call wj("//            MGMTCLAS=&UMGMT,                               ")
call wj("//*           DATACLAS="dataclas"                            ")
call wj("//*           STORCLAS="storclas"                            ")
if sysdsorg = 'PO' then
call wj("//            SPACE=(&UTYPE,(&UPRI,&USEC,&UDIRBLK),RLSE),    ")
if sysdsorg \= 'PO' then do
call wj("//            SPACE=(&UTYPE,(&UPRI,&USEC),RLSE),             ")
   if dcb ='no' then signal refdd
call wj("//            RECFM=&URECFM,LRECL=&ULRECL,BLKSIZE=&UBLKSIZE, ")
end
refdd :
call wj("//            REFDD=*.SYSUT1                                 ")
if sysdsorg = 'PO' then do
call wj("//SYSIN    DD DUMMY                                          ")
end
if sysdsorg \= 'PO' then do
call wj("//SYSIN    DD *                                              ")
call wj("    REPRO INFILE(SYSUT1) OUTFILE(SYSUT2)                     ")
end
call wj("/*                                                           ")
address tso "EXECIO" wjcount "DISKW" COPYJCL "(FINIS"
if rc > 2 then do
    ZEDSMSG = "//Error writing JCL "||RC
    "ISPEXEC SETMSG MSG(ISRZ000)"
    call qui
end
return

wj :
parse arg stream
queue stream
wjcount = wjcount + 1
return

edit_jcl :
ZEDSMSG = '*Verify & submit*'
"ISPEXEC SETMSG MSG(ISRZ000)"
"ISPEXEC Edit DATASET("jcl_dsn")"
IF RC > 4 THEN DO
    ZEDSMSG = "Unexpected Error "||RC
    "ISPEXEC SETMSG MSG(ISRZ000)"
    call qui
END
return

print :
return
address tso clear
say sysdsname
say sysvolume
say sysunit
say sysdsorg
say sysrecfm
say syslrecl
say sysblksize
say syskeylen
say sysprimary
say sysseconds
say sysunits
say sysadirblk
say sysvolume
return

init  :
    sysdsname = ''
    sysvolume = ''
    sysunit = ''
    sysdsorg = ''
    sysrecfm = ''
    syslrecl = ''
    sysblksize  = ''
    syskeylen = ''
    sysprimary = ''
    sysseconds = ''
    sysunits = ''
    sysadirblk = ''
    wjcount  = 0
    dcb ='yes'
return

dataset :
getline = udsname
title = 'qc'
call sms str getline title
if result = 'IAM' then do
     ZWINTTL='* Message *'
    "vput (ZWINTTL)"
    "ADDPOP"
     ZEDLMSG = "QuickCopy does not support IAM"
    "ISPEXEC SETMSG MSG(ISRZ000)"
    "REMPOP"
     exit 0
end

parse value result with getline dataclas storclas mgmtclas
myline = getline

CheckDsn = "'"||TRANSLATE(STRIP(myline))||"'"
LTAB  = """'()";
f_name = strip(translate(myline," ",LTAB))
CheckDsn = "'"||f_name||"'"
avail = SYSDSN(CheckDsn)
if avail \= 'OK' then do
   upper f_name
   return
end
else do
     ZWINTTL='* ERROR *'
    "vput (ZWINTTL)"
    "ADDPOP"
     ZEDLMSG = "Dataset already exists! Retry"
    "ISPEXEC SETMSG MSG(ISRZ000)"
    "REMPOP"
     ZCMD = ''
     signal dataset
end
