/*---------Language: REXX-------------------------------------$$PROLOG*/
/*     Program Name: PATMATCH.CMD                                     */
/*      Description: REXX exec to perform QA tests for patmatch.      */
/*    Customization: None                                             */
/* Input Parameters: None                                             */
/*    Statvars Used: None                                             */
/*          Invokes: None                                             */
/*     Return Codes: 0  - Successful Completion                       */
/* Related Routines: None                                             */
/*     Restrictions: None                                             */
/*     Dependencies: None                                             */
/*       Change log: Add new entries to the top                       */
/*-----------------Changed 12-MAY-2001 by: Bob Stark -----------------*/
/* 1. Cleanup for posting                                             */
/*--------------------------------------------------------------------*/
/* Copyright (C) 2000 ProTech Professional Technical Services. No war-*/
/* ranty expressed or implied. Permission to use, copy, and distribute*/
/* this document without fee is hereby granted, provided that this    */
/* copyright notice appear in all copies.  Permission to modify the   */
/* code is granted, but not the right to distribute the modified code,*/
/* which should be returned to the maintainer for inclusion into the  */
/* distributed version.  Contacts: 412-373-8855  www.protechpts.com   */
/*--------------------------------------------------------------------*/

CALL   ON ERROR   NAME RXERROR
SIGNAL ON SYNTAX  NAME RXERROR
SIGNAL ON NOVALUE NAME RXERROR

say patmatch('ABCDWxyz','ABCDwxyz')' = 1'
SAY PATMATCH('ABCDWXYZ','ABCDWXYZ')' = 1'
SAY PATMATCH('ABC*XYZ','ABCDWXYZ')' = 1'
SAY PATMATCH('ABC*XYZ','ABCDXYZ')' = 1'
SAY PATMATCH('ABC*XYZ','ABCXYZ')' = 1'
SAY PATMATCH('*','ABCXYZ')' = 1'
SAY PATMATCH('*XYZ','ABCDWXYZ')' = 1'
SAY PATMATCH('%XYZ','WXYZ')' = 1'
SAY PATMATCH('%X*','WXYZ')' = 1'
SAY PATMATCH('%%%%','WXYZ')' = 1'
SAY PATMATCH('WXYZ*','WXYZ')' = 1'
SAY PATMATCH('*XY%','WXYZ')' = 1'
SAY PATMATCH('%B%D%F%H','ABCDEFGH')' = 1'
SAY PATMATCH('*B*D*F*H','ABCDEFGH')' = 1'
SAY PATMATCH('A*C*E*G*','ABCDEFGH')' = 1'
SAY PATMATCH('*EFG*','ABCDEFGH')' = 1'
TRACE N
SAY PATMATCH('ABC*XYZ','ABCXYZA')' = 0'
TRACE N
SAY PATMATCH('ABC*XYZ','ABCXY')' = 0'
SAY PATMATCH('*WXY','ABCDWXYZ')' = 0'
SAY PATMATCH('ABC*XYZ','ABDDWXYZ')' = 0'
SAY PATMATCH('*DWW*','ABDDWXYZ')' = 0'
SAY PATMATCH('ABC*XYZ','ABCDWYYZ')' = 0'
SAY 'All tests completed'
EXIT

/*RXCOPY PATMATCH **** 67 LINES COPIED ON 05-12-01 AT 08:01************/
/*-Start of PATMATCH function---------------------------Version-01.01-*/
/*:PATMATCH function - Performs ISPF-type pattern matching on a pair  */
/* of strings: 1st string is the pattern, 2nd is the data.            */
/* Example: rc=PATMATCH('*EFG*','ABCDEFGH')                           */
/* Returns: 0:    Pattern does not match the data.                    */
/*          1:    Pattern does match the data.                        */
/*          text: Error occured, text gives the details.              */
/* Copyright (C) 1996, 1998 Washington Systems. All rights reserved.  */
/*--------------------------------------------------------------------*/
PATMATCH: PROCEDURE EXPOSE gbl.
TRACE N
IF ARG() <> 2 THEN RETURN 'PATMATCH ERROR: 2 parms required, caller',
                          'passed 'ARG()' parms'
haystack = ARG(2)                  /* Data to be searched w/ pattern  */
pattern = ARG(1)                   /* Search pattern                  */
wild = 0                           /* No '*' seen (yet)               */
  DO WHILE pattern <> ''           /* Process pattern from L to R     */

  a = POS('*',pattern)             /* Look for '*' in pattern         */
  IF a > 0 THEN                    /* If found, extract any           */
    DO                             /*  preceeding search string       */
    PARSE VAR pattern needle '*' +0 newpattern
    IF needle = '' THEN
      DO                           /* If no preceeding search string, */
      wild = 1                     /*  mark next search as 'wild card'*/
      PARSE VAR newpattern 2 pattern /* remove '*' from pattern       */
      ITERATE                      /*    and continue testing         */
      END
    END

  p = POS('%',pattern)             /* Look for '%' in pattern         */
  IF p > 0 & (a = 0 | p < a) THEN  /* If found before any '*', extract*/
    DO                             /*  any preceeding search string   */
    PARSE VAR pattern needle '%' +0 newpattern
    IF needle = '' THEN
      DO                           /* If no preceeding search string, */
      needle = LEFT(haystack,1)    /* take next text as search string */
      PARSE VAR newpattern 2 newpattern
      wild = 0                     /* Mark next search 'not wild card'*/
      END
    END

  IF p = 0 & a = 0                 /* No special chars, use remainder */
  THEN PARSE VAR pattern needle newpattern

  pattern = newpattern             /* Update pattern for next pass    */
  pos = POS(needle,haystack)       /* Look for this pattern           */
  IF pos = 0 THEN RETURN 0         /* Not found, outta here           */
  IF pos > 1 THEN                  /* Found, but not at start-of-text */
    IF wild <> 1                   /* Wild card char in effect?       */
    THEN RETURN 0                  /* No wild card, outta here        */
  wild = 0                         /* Reset wild card character       */
  len = LENGTH(haystack)-LENGTH(needle)-pos+1
  haystack = RIGHT(haystack,len)   /* Remove data that we just scanned*/
  IF haystack = '' THEN
    DO                             /* No more data to scan...         */
    IF pattern = ''                /* Out of pattern as well?         */
    THEN RETURN 1                  /* Yes, that's a match.            */
    IF pattern = '*'               /* Did pattern end with wild card? */
    THEN RETURN 1                  /* Yes, that's a match too.        */
    RETURN 0                       /* Else, sorry, not a match.       */
    END
  END                              /* Ran out of pattern to scan      */
IF wild = 1                        /* Did pattern end with wild card? */
THEN RETURN 1                      /* Yes, that's a match.            */
ELSE RETURN 0                      /* Else, sorry, not a match.       */
/*-End of PATMATCH function-------------------------------------------*/

/*RXCOPY RXERROR **** 129 LINES COPIED ON 05-12-01 AT 08:01************/
/*START OF RXERROR--------------------------------------Version-01.07-*/
/*:RXERROR SUBROUTINE: Generic REXX error condition handler. This     */
/* routine gets control when a condition is raised, and:              */
/* a. Validates that the condition is ok, and returns quietly, or     */
/* b. Issues diagnostic messages about the error & where it occured.  */
/*                                                                    */
/* To use this routine, code the following near the top of your exec: */
/* CALL   ON ERROR   NAME RXERROR                                     */
/* SIGNAL ON SYNTAX  NAME RXERROR                                     */
/* SIGNAL ON NOVALUE NAME RXERROR                                     */
/*                                                                    */
/* In addition, set the variable 'ok' to any return code values       */
/* that are acceptable for host commands.  For example:               */
/*                                                                    */
/* ok=4; ADDRESS TSO 'GETVARL GLOBAL_*'; DROP ok                      */
/* ok='4 8';"host cmd"; DROP ok <-- return codes 4 or 8 are ok        */
/* ok='all';"host cmd"; DROP ok <-- all return codes are acceptable   */
/*                                                                    */
/* The first example permits GETVARL to get rc 4 and not fail or      */
/* issue any error messages.  Note that "ok=0" is always implied      */
/* because the REXX ERROR condition is not raised if rc=0.            */
/*------------------------------------------------------------------- */
/*NOTES: This subroutine does not use the PROCEDURE instruction, so   */
/*       variable names used within it must be _hidden.               */
/*                                                                    */
/*       If an error occurs that's not one of the 'OK' values,        */
/*       execution will fall thru this subroutine and any statements  */
/*       following it will be executed.  This is a good place to put  */
/*       cleanup logic, or a signal to your "cleanup-and-exit" label. */
/*                                                                    */
/*       Variables _RXERRORMSG1 and _RXERRORMSG2 are created when     */
/*       RXERROR falls thru, and may be used to send error msgs to    */
/*       other destinations, such as a GUI MSGBOX or ADDRESS AXC WTXC.*/
/*                                                                    */
/*       As a side effect, RXERROR sets ISPF "CONTROL ERRORS RETURN". */
/*       If your routine doesn't run this way, you'll need to restore */
/*       your ISPF CONTROL ERRORS setting.                            */
/* Copyright (C) 1996,1999 Washington Systems. All rights reserved.   */
/*--------------------------------------------------------------------*/

RXERROR: TRACE N                  /* Turn off tracing for this func.  */
_sigl = sigl
RXERROR1: TRACE N                 /* Turn off tracing for this func.  */
CALL   OFF ERROR
SIGNAL OFF SYNTAX
IF SYMBOL('rc') = 'VAR' THEN _rc = rc
ELSE _rc = 'n/a'
PARSE SOURCE _EX_ENV . _EX_NAME . . . . _EX_ADDRSPC .
IF POS(CONDITION('C'),'ERROR FAILURE') > 0 THEN  /* Error or Failure? */
                                       /* Yes. Were we CALLed?        */
  IF CONDITION('I') = 'CALL' | _EX_ENV = 'OPS/REXX' THEN
    IF SYMBOL('OK') = 'VAR' THEN       /* Yes.  Is OK a variable?     */
      IF WORDPOS(_rc,ok)>0 | TRANSLATE(ok)='ALL' THEN /* Is error ok? */
        DO                                            /* Yes, return  */
        CALL   ON ERROR   NAME RXERROR /*  Restore the                */
        SIGNAL ON SYNTAX  NAME RXERROR /*   Error handler             */
        DROP ZERRLM                    /* Toss any ISPF error msg     */
        rc = _rc                       /* Restore orig RC for caller  */
        RETURN                         /* Return to point of error    */
        END
IF SYMBOL('_errtext') = 'LIT'
THEN _errtext = '';                /* Initialize error text           */
IF CONDITION('C') = 'SYNTAX' THEN  /* If a REXX syntax error,         */
  IF _rc >= 0 & _rc < 100          /*  and rc is within valid range,  */
  THEN _errtext = ' ('ERRORTEXT(_rc)')';/* then get REXX error text.  */
  ELSE NOP;
ELSE
  IF CONDITION('C') = 'NOVALUE' THEN /* See if undefined variable     */
    DO;
    _errtext = ' (No value for variable 'CONDITION('D')')';
    _rc = 'n/a';                   /* RC not set for NOVALUE          */
    END
  ELSE
    IF POS(CONDITION('C'),'ERROR FAILURE') > 0 THEN /*Hostcmd problem?*/
      DO   /* Extract host cmd name... */
      _cmd = STRIP(STRIP(WORD(CONDITION('D'),1),'B','"'),'B',"'")
      _errtext = ' (Host command '_cmd')'
      _addr = ADDRESS()            /* Find environment of failing cmd */
      IF _sigl <= SOURCELINE() THEN/* Is source code avail?           */
        IF TRANSLATE(WORD(SOURCELINE(_sigl),1)) = 'ADDRESS'
        THEN _addr = TRANSLATE(WORD(SOURCELINE(_sigl),2))
      _addr = STRIP(TRANSLATE(_addr,,'!@#$%&*()_-+=;:,./?"'"'",' '))
      IF _addr = 'PPQ' & SYMBOL('PPQ.ERROR') = 'VAR'
      THEN _errtext = ' (Host command PPQ, 'ppq.error')'
      IF _addr = 'VOX' & SYMBOL('VOX.ERROR') = 'VAR'
      THEN _errtext = ' (Host command VOX, 'vox.error')'
      IF _addr = 'ASODDE' | SYMBOL('ASODDE.ERROR') = 'VAR'
      THEN _errtext = ' (Host command ASODDE, 'asodde.error')'
      IF SYMBOL('SQLCODE') = 'VAR'
      THEN _errtext = ' ( SQLCODE=' sqlcode')'
      END
    ELSE IF CONDITION('C') <> '' THEN
      _errtext = ' (Condition='CONDITION('C')', Description=',
        CONDITION('D')')'

_rxerrormsg1 = "RXERROR Error RC "_rc""_errtext" at line "_sigl,
               "in EXEC" _ex_name
IF _sigl <= SOURCELINE()           /* Is source code avail?           */
THEN _rxerrormsg2 = "RXERROR Line "_sigl": "STRIP(SOURCELINE(_sigl))
ELSE _rxerrormsg2 = ""

IF _ex_addrspc = 'ISPF' THEN       /* Running under ISPF?             */
  DO                               /* Yes, issue short & long msgs... */
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN" /* Capture all ISPF RCs     */
  zedsmsg = ''                     /* Format ISPF short message       */
  zedlmsg = "Error RC "_rc""_errtext" at line "_sigl" in EXEC" _ex_name
  IF _sigl <= SOURCELINE()         /* Is source code avail?           */
  THEN zedlmsg = LEFT(zedlmsg': ',78)STRIP(SOURCELINE(_sigl))
  IF SYMBOL('ZERRLM') = 'VAR'
  THEN zedlmsg = LEFT(zedlmsg,156) 'ISPF Error: 'STRIP(ZERRLM)
  ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
  IF rc = 12 THEN                  /* ISPMLIB MESSAGE found?          */
    DO                             /* No, use SAY instead.            */
    SAY 'RXERROR ISPMLIB Message ISRZ001 Not Found'
    SIGNAL _SAY_ERRMSG;
    END
  SIGNAL _SAY_SQLMSG;
  END

_SAY_ERRMSG:
SAY _rxerrormsg1; IF _rxerrormsg2 <> '' THEN SAY _rxerrormsg2; SAY ''
_SAY_SQLMSG:
IF SYMBOL('SQLCODE') = 'VAR' & QUEUED() > 0 THEN
  IF WORDPOS(sqlcode,'0 100') = 0 THEN
    DO _i = 1 BY 1 WHILE QUEUED() > 0
    PULL _stack
    SAY 'SQL STACK:'RIGHT(_i,2)':'_stack
    END
/*END OF RXERROR------------------------------------------------------*/

